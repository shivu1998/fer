{"version":3,"sources":["credentials/IosCredentials.js"],"names":["async","username","appleTeamId","distCerts","await","getExistingUserCredentials","map","usedByApps","userCredentialsId","certId","certP12","certPassword","serialNumber","IosCodeSigning","findP12CertSerialNumber","let","name","join","value","distCertSerialNumber","String","getExistingDistCerts","pushKeys","apnsKeyId","short","getExistingPushKeys","type","err","certs","Api","callMethodAsync","Error","rest","split"],"mappings":";;;;;;;;;;+BA+BOA,WACLC,QADKD,EAELE,WAFKF,EAGgB;AACrB,UAAMG,YAAYC,MAAMC,2BAA2BJ,QAA3BI,EAAqCH,WAArCG,EAAkD,WAAlDA,CAAxB;AACA,WAAOF,UAAUG,GAAVH,CAAc,UAAC,EAAEI,UAAF,EAAcC,iBAAd,EAAiCC,MAAjC,EAAyCC,OAAzC,EAAkDC,YAAlD,EAAD,EAAsE;AACzF,YAAMC,eAAeC,4CAAeC,uBAAfD,CAAuCH,OAAvCG,EAAgDF,YAAhDE,CAArB;AACAE,UAAIC,OAAQ,kBAAiBJ,YAAa,EAA1CG;AACA,UAAIN,MAAJ,EAAY;AACVO,eAAQ,GAAEA,IAAK,qBAAoBP,MAAO,EAA1CO;AACF;AACA,UAAIT,UAAJ,EAAgB;AACdS,eAAQ,iBAAgBT,WAAWU,IAAXV,CAAgB,IAAhBA,CAAsB,KAAIS,IAAK,GAAvDA;AACF;AACA,aAAO;AACLE,eAAO;AACLC,gCAAsBP,YADjB;AAELJ,6BAAmBY,OAAOZ,iBAAPY;AAFd,SADF;AAKLJ;AALK,OAAP;AAOD,KAhBMb,CAAP;AAiBF,G;;kBAtBsBkB,oB;;;;;;gCAwBfrB,WACLC,QADKD,EAELE,WAFKF,EAGgB;AACrB,UAAMsB,WAAWlB,MAAMC,2BAA2BJ,QAA3BI,EAAqCH,WAArCG,EAAkD,UAAlDA,CAAvB;AACA,WAAOiB,SAAShB,GAATgB,CAAa,UAAC,EAAEf,UAAF,EAAcC,iBAAd,EAAiCe,SAAjC,EAAD,EAAkD;AACpER,UAAIC,OAAQ,WAAUO,SAAU,EAAhCR;AACA,UAAIR,UAAJ,EAAgB;AACdS,eAAQ,iBAAgBT,WAAWU,IAAXV,CAAgB,IAAhBA,CAAsB,KAAIS,IAAK,GAAvDA;AACF;AACA,aAAO;AACLE,eAAO;AACLV;AADK,SADF;AAILQ,YAJK;AAKLQ,eAAOD;AALF,OAAP;AAOD,KAZMD,CAAP;AAaF,G;;kBAlBsBG,mB;;;;;;gCAoBtBzB,WACEC,QADFD,EAEEE,WAFFF,EAGE0B,IAHF1B,EAIuB;AACrB,UAAM,EAAE2B,GAAF,EAAOC,KAAP,KAAiBxB,MAAMyB,8BAAIC,eAAJD,CAAoB,4BAApBA,EAAkD,EAAlDA,EAAsD,MAAtDA,EAA8D;AACzF5B,cADyF;AAEzFC,iBAFyF;AAGzFwB;AAHyF,KAA9DG,CAA7B;;AAMA,QAAIF,GAAJ,EAAS;AACP,YAAM,IAAII,KAAJ,CAAU,mDAAV,CAAN;AACF,KAFA,MAEO;AACL,aAAOH,MAAMtB,GAANsB,CAAU;AAAA,YAAC,EAAErB,UAAF,EAAcC,iBAAd,EAAD;AAAA,YAAqCwB,IAArC;;AAAA;AACfzB,sBAAYA,cAAcA,WAAW0B,KAAX1B,CAAiB,GAAjBA,CADX;AAEfC,6BAAmBY,OAAOZ,iBAAPY;AAFJ,WAGZY,IAHY;AAAA,OAAVJ,CAAP;AAKF;AACF,G;;kBApBevB,0B;;;;;;;AAzEf;AAAA;AAAA;;;;AACA;AAAA;AAAA","file":"../../credentials/IosCredentials.js","sourcesContent":["/* @flow */\n\nimport Api from '../Api';\nimport * as IosCodeSigning from '../detach/IosCodeSigning';\n\nexport type Credentials = {\n  appleId?: string,\n  password?: string,\n  teamId?: string,\n  certP12?: string,\n  certPassword?: string,\n  pushP12?: string,\n  pushPassword?: string,\n  provisioningProfile?: string,\n  enterpriseAccount?: string,\n  // These are ids on the spaceship object (implementation detail), Spaceship::Portal::Certificate\n  certId?: string,\n  pushId?: string,\n  provisioningProfileId?: string,\n};\n\nexport type CredObject = {\n  name: string,\n  value: {\n    userCredentialsId?: string,\n    serialNumber?: string,\n  },\n};\n\nexport type CredsList = Array<CredObject>;\n\nexport async function getExistingDistCerts(\n  username: string,\n  appleTeamId: string\n): Promise<?CredsList> {\n  const distCerts = await getExistingUserCredentials(username, appleTeamId, 'dist-cert');\n  return distCerts.map(({ usedByApps, userCredentialsId, certId, certP12, certPassword }) => {\n    const serialNumber = IosCodeSigning.findP12CertSerialNumber(certP12, certPassword);\n    let name = `Serial number: ${serialNumber}`;\n    if (certId) {\n      name = `${name}, Certificate ID: ${certId}`;\n    }\n    if (usedByApps) {\n      name = `Used in apps: ${usedByApps.join(', ')} (${name})`;\n    }\n    return {\n      value: {\n        distCertSerialNumber: serialNumber,\n        userCredentialsId: String(userCredentialsId),\n      },\n      name,\n    };\n  });\n}\n\nexport async function getExistingPushKeys(\n  username: string,\n  appleTeamId: string\n): Promise<?CredsList> {\n  const pushKeys = await getExistingUserCredentials(username, appleTeamId, 'push-key');\n  return pushKeys.map(({ usedByApps, userCredentialsId, apnsKeyId }) => {\n    let name = `Key ID: ${apnsKeyId}`;\n    if (usedByApps) {\n      name = `Used in apps: ${usedByApps.join(', ')} (${name})`;\n    }\n    return {\n      value: {\n        userCredentialsId,\n      },\n      name,\n      short: apnsKeyId,\n    };\n  });\n}\n\nasync function getExistingUserCredentials(\n  username: string,\n  appleTeamId: string,\n  type: string\n): Promise<?CredsList> {\n  const { err, certs } = await Api.callMethodAsync('getExistingUserCredentials', [], 'post', {\n    username,\n    appleTeamId,\n    type,\n  });\n\n  if (err) {\n    throw new Error('Error getting existing distribution certificates.');\n  } else {\n    return certs.map(({ usedByApps, userCredentialsId, ...rest }) => ({\n      usedByApps: usedByApps && usedByApps.split(';'),\n      userCredentialsId: String(userCredentialsId),\n      ...rest,\n    }));\n  }\n}\n"],"sourceRoot":"/xdl@53.3.0/src"}