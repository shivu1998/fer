{"version":3,"sources":["Simulator.js"],"names":["async","args","await","spawnAsync","e","_isLicenseOutOfDate","stdout","stderr","ErrorCode","XCODE_LICENSE_NOT_ACCEPTED","Logger","global","error","join","_xcrunAsync","let","result","osascript","execAsync","trim","console","XCODE_NOT_INSTALLED_ERROR","warn","matches","match","length","version","semver","valid","lt","SUGGESTED_XCODE_VERSION","isXDLError","toString","_isSimulatorInstalledAsync","_isSimulatorRunningAsync","info","_waitForSimulatorRunningAsync","_openSimulatorAsync","zeroMeansNo","bootedDevice","_bootedSimulatorDeviceAsync","delayAsync","infoJson","JSON","parse","_listSimulatorDevicesAsync","simulatorDeviceInfo","runtime","devices","i","device","state","_quitSimulatorAsync","simDir","_dirForSimulatorDevice","udid","glob","cwd","_isExpoAppInstalledOnCurrentBootedSimulatorAsync","_waitForExpoAppInstalledOnCurrentBootedSimulatorAsync","regex","regexMatch","exec","_expoVersionOnCurrentBootedSimulatorAsync","versions","Versions","versionsAsync","installedVersion","iosVersion","notifications","code","NotificationCode","OLD_IOS_APP_VERSION","_checkExpoUpToDateAsync","url","dir","path","_simulatorCacheDirectory","Api","downloadAsync","extract","fs","exists","filesInDir","readdir","rimraf","sync","mkdirpSync","iosUrl","_downloadSimulatorAppAsync","START_LOADING","STOP_LOADING","_installExpoOnSimulatorAsync","message","includes","_uninstallExpoAppFromSimulatorAsync","installResult","status","_lastUrl","upgradeExpoAsync","_openUrlInSimulatorAsync","isDetached","success","msg","Analytics","logEvent","platform","openUrlInSimulatorSafeAsync","projectRoot","projectUrl","UrlUtils","constructManifestUrlAsync","hostType","exp","ProjectUtils","readConfigJsonAsync","openProjectAsync","isPlatformSupported","process","text","lower","toLowerCase","resolve","homeDir","dotExpoHomeDirectory","UserSettings"],"mappings":"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","file":"../Simulator.js","sourcesContent":["/**\n * @flow\n */\n\nimport delayAsync from 'delay-async';\nimport glob from 'glob-promise';\nimport homeDir from 'home-dir';\nimport osascript from '@expo/osascript';\nimport path from 'path';\nimport semver from 'semver';\nimport spawnAsync from '@expo/spawn-async';\nimport rimraf from 'rimraf';\nimport fs from 'fs-extra';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport ErrorCode from './ErrorCode';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport XDLError from './XDLError';\nimport * as UrlUtils from './UrlUtils';\n\nlet _lastUrl = null;\n\nconst SUGGESTED_XCODE_VERSION = `8.2.0`;\nconst XCODE_NOT_INSTALLED_ERROR =\n  'Simulator not installed. Please visit https://developer.apple.com/xcode/download/ to download Xcode and the iOS simulator. If you already have the latest version of Xcode installed, you may have to run the command `sudo xcode-select -s /Applications/Xcode.app`.';\n\nexport function isPlatformSupported() {\n  return process.platform === 'darwin';\n}\n\nfunction _isLicenseOutOfDate(text) {\n  if (!text) {\n    return false;\n  }\n\n  let lower = text.toLowerCase();\n  return lower.includes('xcode') && lower.includes('license');\n}\n\nasync function _xcrunAsync(args) {\n  try {\n    return await spawnAsync('xcrun', args);\n  } catch (e) {\n    if (_isLicenseOutOfDate(e.stdout) || _isLicenseOutOfDate(e.stderr)) {\n      throw new XDLError(\n        ErrorCode.XCODE_LICENSE_NOT_ACCEPTED,\n        'Xcode license is not accepted. Please run `sudo xcodebuild -license`.'\n      );\n    } else {\n      Logger.global.error(`Error running \\`xcrun ${args.join(' ')}\\`: ${e.stderr}`);\n      throw e;\n    }\n  }\n}\n\n// Simulator installed\nexport async function _isSimulatorInstalledAsync() {\n  let result;\n  try {\n    result = (await osascript.execAsync('id of app \"Simulator\"')).trim();\n  } catch (e) {\n    console.error(\n      \"Can't determine id of Simulator app; the Simulator is most likely not installed on this machine\",\n      e\n    );\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n  if (result !== 'com.apple.iphonesimulator') {\n    console.warn(\n      \"Simulator is installed but is identified as '\" + result + \"'; don't know what that is.\"\n    );\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n\n  // check xcode version\n  try {\n    const { stdout } = await spawnAsync('xcodebuild', ['-version']);\n\n    // find something that looks like a dot separated version number\n    let matches = stdout.match(/[\\d]{1,2}\\.[\\d]{1,3}/);\n    if (matches.length === 0) {\n      // very unlikely\n      console.error('No version number found from `xcodebuild -version`.');\n      Logger.global.error(\n        'Unable to check Xcode version. Command ran successfully but no version number was found.'\n      );\n      return false;\n    }\n\n    // we're cheating to use the semver lib, but it expects a proper patch version which xcode doesn't have\n    const version = matches[0] + '.0';\n\n    if (!semver.valid(version)) {\n      console.error('Invalid version number found: ' + matches[0]);\n      return false;\n    }\n\n    if (semver.lt(version, SUGGESTED_XCODE_VERSION)) {\n      console.warn(\n        `Found Xcode ${version}, which is older than the recommended Xcode ${SUGGESTED_XCODE_VERSION}.`\n      );\n    }\n  } catch (e) {\n    // how would this happen? presumably if Simulator id is found then xcodebuild is installed\n    console.error(`Unable to check Xcode version: ${e}`);\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n\n  // make sure we can run simctl\n  try {\n    await _xcrunAsync(['simctl', 'help']);\n  } catch (e) {\n    if (e.isXDLError) {\n      Logger.global.error(e.toString());\n    } else {\n      console.warn(`Unable to run simctl: ${e.toString()}`);\n      Logger.global.error(\n        'xcrun may not be configured correctly. Try running `sudo xcode-select --reset` and running this again.'\n      );\n    }\n    return false;\n  }\n\n  return true;\n}\n\n// Simulator opened\nexport async function _openSimulatorAsync() {\n  if (!(await _isSimulatorRunningAsync())) {\n    Logger.global.info('Opening iOS simulator');\n    await spawnAsync('open', ['-a', 'Simulator']);\n    await _waitForSimulatorRunningAsync();\n  }\n}\n\nexport async function _isSimulatorRunningAsync() {\n  let zeroMeansNo = (await osascript.execAsync(\n    'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n  )).trim();\n  if (zeroMeansNo === '0') {\n    return false;\n  }\n\n  let bootedDevice = await _bootedSimulatorDeviceAsync();\n  return !!bootedDevice;\n}\n\nasync function _waitForSimulatorRunningAsync() {\n  if (await _isSimulatorRunningAsync()) {\n    return true;\n  } else {\n    await delayAsync(100);\n    return await _waitForSimulatorRunningAsync();\n  }\n}\n\nasync function _listSimulatorDevicesAsync() {\n  let infoJson = await _xcrunAsync(['simctl', 'list', 'devices', '--json']);\n  let info = JSON.parse(infoJson.stdout);\n  return info;\n}\n\nasync function _bootedSimulatorDeviceAsync() {\n  let simulatorDeviceInfo = await _listSimulatorDevicesAsync();\n  for (let runtime in simulatorDeviceInfo.devices) {\n    let devices = simulatorDeviceInfo.devices[runtime];\n    for (let i = 0; i < devices.length; i++) {\n      let device = devices[i];\n      if (device.state === 'Booted') {\n        return device;\n      }\n    }\n  }\n  return null;\n}\n\nexport function _dirForSimulatorDevice(udid: string) {\n  return path.resolve(homeDir(), 'Library/Developer/CoreSimulator/Devices', udid);\n}\n\nexport async function _quitSimulatorAsync() {\n  return await osascript.execAsync('tell application \"Simulator\" to quit');\n}\n\n// Expo installed\nexport async function _isExpoAppInstalledOnCurrentBootedSimulatorAsync() {\n  let device = await _bootedSimulatorDeviceAsync();\n  if (!device) {\n    return false;\n  }\n  let simDir = await _dirForSimulatorDevice(device.udid);\n  let matches = await glob(\n    './data/Containers/Data/Application/*/Library/Caches/Snapshots/host.exp.Exponent',\n    { cwd: simDir }\n  );\n\n  return matches.length > 0;\n}\n\nexport async function _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync() {\n  if (await _isExpoAppInstalledOnCurrentBootedSimulatorAsync()) {\n    return true;\n  } else {\n    await delayAsync(100);\n    return await _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync();\n  }\n}\n\nexport async function _expoVersionOnCurrentBootedSimulatorAsync() {\n  let device = await _bootedSimulatorDeviceAsync();\n  if (!device) {\n    return null;\n  }\n  let simDir = await _dirForSimulatorDevice(device.udid);\n  let matches = await glob('./data/Containers/Bundle/Application/*/Exponent-*.app', {\n    cwd: simDir,\n  });\n\n  if (matches.length === 0) {\n    return null;\n  }\n\n  let regex = /Exponent\\-([0-9\\.]+)\\.app/;\n  let regexMatch = regex.exec(matches[0]);\n  if (regexMatch.length < 2) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nexport async function _checkExpoUpToDateAsync() {\n  let versions = await Versions.versionsAsync();\n  let installedVersion = await _expoVersionOnCurrentBootedSimulatorAsync();\n\n  if (!installedVersion || semver.lt(installedVersion, versions.iosVersion)) {\n    Logger.notifications.warn(\n      { code: NotificationCode.OLD_IOS_APP_VERSION },\n      'This version of the Expo app is out of date. Uninstall the app and run again to upgrade.'\n    );\n  }\n}\n\nexport async function _downloadSimulatorAppAsync(url) {\n  // If specific URL given just always download it and don't use cache\n  if (url) {\n    let dir = path.join(_simulatorCacheDirectory(), `Exponent-tmp.app`);\n    await Api.downloadAsync(url, dir, { extract: true });\n    return dir;\n  }\n\n  let versions = await Versions.versionsAsync();\n  let dir = path.join(_simulatorCacheDirectory(), `Exponent-${versions.iosVersion}.app`);\n\n  if (await fs.exists(dir)) {\n    let filesInDir = await fs.readdir(dir);\n    if (filesInDir.length > 0) {\n      return dir;\n    } else {\n      rimraf.sync(dir);\n    }\n  }\n\n  fs.mkdirpSync(dir);\n  try {\n    await Api.downloadAsync(versions.iosUrl, dir, { extract: true });\n  } catch (e) {\n    rimraf.sync(dir);\n    throw e;\n  }\n\n  return dir;\n}\n\n// url: Optional URL of Exponent.app tarball to download\nexport async function _installExpoOnSimulatorAsync(url) {\n  Logger.global.info(`Downloading latest version of Expo`);\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let dir = await _downloadSimulatorAppAsync(url);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  Logger.global.info('Installing Expo on iOS simulator');\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let result = await _xcrunAsync(['simctl', 'install', 'booted', dir]);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  return result;\n}\n\nexport async function _uninstallExpoAppFromSimulatorAsync() {\n  try {\n    Logger.global.info('Uninstalling Expo from iOS simulator.');\n    await _xcrunAsync(['simctl', 'uninstall', 'booted', 'host.exp.Exponent']);\n  } catch (e) {\n    if (e.message && e.message.includes('No devices are booted.')) {\n      return null;\n    } else {\n      console.error(e);\n      throw e;\n    }\n  }\n}\n\nexport function _simulatorCacheDirectory() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let dir = path.join(dotExpoHomeDirectory, 'ios-simulator-app-cache');\n  fs.mkdirpSync(dir);\n  return dir;\n}\n\nexport async function upgradeExpoAsync(): Promise<boolean> {\n  if (!(await _isSimulatorInstalledAsync())) {\n    return false;\n  }\n\n  await _openSimulatorAsync();\n  await _uninstallExpoAppFromSimulatorAsync();\n  let installResult = await _installExpoOnSimulatorAsync();\n  if (installResult.status !== 0) {\n    return false;\n  }\n\n  if (_lastUrl) {\n    Logger.global.info(`Opening ${_lastUrl} in Expo.`);\n    await _xcrunAsync(['simctl', 'openurl', 'booted', _lastUrl]);\n    _lastUrl = null;\n  }\n\n  return true;\n}\n\n// Open Url\nexport async function _openUrlInSimulatorAsync(url: string) {\n  return await _xcrunAsync(['simctl', 'openurl', 'booted', url]);\n}\n\nexport async function openUrlInSimulatorSafeAsync(\n  url: string,\n  isDetached: boolean = false\n): Promise<{ success: true } | { success: false, msg: string }> {\n  if (!(await _isSimulatorInstalledAsync())) {\n    return {\n      success: false,\n      msg: 'Unable to verify Xcode and Simulator installation.',\n    };\n  }\n\n  try {\n    await _openSimulatorAsync();\n\n    if (!isDetached && !(await _isExpoAppInstalledOnCurrentBootedSimulatorAsync())) {\n      await _installExpoOnSimulatorAsync();\n      await _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync();\n    }\n\n    if (!isDetached) {\n      _lastUrl = url;\n      _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    Logger.global.info(`Opening ${url} in iOS simulator`);\n    await _openUrlInSimulatorAsync(url);\n  } catch (e) {\n    if (e.isXDLError) {\n      // Hit some internal error, don't try again.\n      // This includes Xcode license errors\n      Logger.global.error(e.message);\n      return {\n        success: false,\n        msg: `${e.toString()}`,\n      };\n    }\n\n    if (isDetached) {\n      Logger.global.error(\n        `Error running app. Have you installed the app already using Xcode? Since you are detached you must build manually. ${e.toString()}`\n      );\n    } else {\n      Logger.global.error(`Error installing or running app. ${e.toString()}`);\n    }\n\n    return {\n      success: false,\n      msg: `${e.toString()}`,\n    };\n  }\n\n  Analytics.logEvent('Open Url on Device', {\n    platform: 'ios',\n  });\n\n  return {\n    success: true,\n  };\n}\n\nexport async function openProjectAsync(\n  projectRoot: string\n): Promise<{ success: true, url: string } | { success: false, error: string }> {\n  let projectUrl = await UrlUtils.constructManifestUrlAsync(projectRoot, {\n    hostType: 'localhost',\n  });\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let result = await openUrlInSimulatorSafeAsync(projectUrl, !!exp.isDetached);\n  if (result.success) {\n    return { success: true, url: projectUrl };\n  } else {\n    return { success: result.success, error: result.msg };\n  }\n}\n"],"sourceRoot":"/xdl@53.3.0/src"}