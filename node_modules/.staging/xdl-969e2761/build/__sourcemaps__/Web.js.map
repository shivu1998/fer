{"version":3,"sources":["Web.js"],"names":["async","projectRoot","hasWebSupport","await","hasWebSupportAsync","logWebSetup","success","logPreviewNotice","let","url","UrlUtils","constructWebAppUrlAsync","opn","wait","e","Logger","global","error","message","openProjectAsync","exp","readConfigJsonAsync","isWebConfigured","platforms","includes","Array","isArray","length","onlySupportsWebAsync","console","log","chalk","bold","yellow","getWebSetupLogs","appJsonRules","white","whiteBright","green","packageJsonRules","red"],"mappings":";;;;;;;;+BAgBOA,WAAgCC,WAAhCD,EAA6C;AAClD,UAAME,gBAAgBC,MAAMC,mBAAmBH,WAAnBG,CAA5B;AACA,QAAI,CAACF,aAAL,EAAoB;AAClBG;AACA,aAAO,EAAEC,SAAS,KAAX,EAAP;AACF;AACAC;AACA,QAAI;AACFC,UAAIC,MAAMN,MAAMO,gCAASC,uBAATD,CAAiCT,WAAjCS,CAAhBF;AACAI,yCAAIH,GAAJG,EAAS,EAAEC,MAAM,KAAR,EAATD;AACA,aAAO,EAAEN,SAAS,IAAX,EAAiBG,GAAjB,EAAP;AACF,KAJA,CAIE,OAAOK,CAAP,EAAU;AACVC,0CAAOC,MAAPD,CAAcE,KAAdF,CAAqB,kCAAiCD,EAAEI,OAAQ,EAAhEH;AACA,aAAO,EAAET,SAAS,KAAX,EAAkBW,OAAOH,CAAzB,EAAP;AACF;AACF,G;;kBAfsBK,gB;;;;;;gCAqBfnB,WAAkCC,WAAlCD,EAA+C;AACpD,UAAM,EAAEoB,GAAF,KAAUjB,MAAMkB,iEAAoBpB,WAApBoB,CAAtB;AACA,UAAMC,kBAAkBF,IAAIG,SAAJH,CAAcI,QAAdJ,CAAuB,KAAvBA,CAAxB;AACA,WAAOE,eAAP;AACF,G;;kBAJsBlB,kB;;;;;AAMtB;;;;gCACOJ,WAAoCC,WAApCD,EAAiD;AACtD,UAAM,EAAEoB,GAAF,KAAUjB,MAAMkB,iEAAoBpB,WAApBoB,CAAtB;AACA,QAAII,MAAMC,OAAND,CAAcL,IAAIG,SAAlBE,KAAgCL,IAAIG,SAAJH,CAAcO,MAAdP,KAAyB,CAA7D,EAAgE;AAC9D,aAAOA,IAAIG,SAAJH,CAAc,CAAdA,MAAqB,KAA5B;AACF;AACA,WAAO,KAAP;AACF,G;;kBANsBQ,oB;;;;;QAXNvB,W,GAAAA,W;;;;AAjChB;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;AAEA,SAASE,gBAAT,GAA4B;AAC1BsB,UAAQC,GAARD;AACAA,UAAQC,GAARD,CACEE,kCAAMC,IAAND,CAAWE,MAAXF,CACE,yGADFA,CADFF;AAKAA,UAAQC,GAARD;AACF;;AAmBO,SAASxB,WAAT,GAAuB;AAC5BU,sCAAOC,MAAPD,CAAcE,KAAdF,CAAoBmB,iBAApBnB;AACF;;AAiBA,SAASmB,eAAT,GAA2B;AACzB,QAAMC,eAAeJ,kCAAMK,KAANL,CAClB;IACDA,kCAAMM,WAANN,CAAkBC,IAAlBD,CAAwB,UAAxBA,CAAmC;;;;;IAKnCA,kCAAMO,KAANP,CAAYC,IAAZD,CAAkB,cAAlBA,CAAiC;;IAPdA,CAArB;AAWA,QAAMQ,mBAAmBR,kCAAMK,KAANL,CACtB;IACDA,kCAAMM,WAANN,CAAkBC,IAAlBD,CAAwB,cAAxBA,CAAuC;;;IAGvCA,kCAAMO,KAANP,CAAYC,IAAZD,CAAkB,uCAAlBA,CAA0D;IAC1DA,kCAAMO,KAANP,CAAYC,IAAZD,CAAkB,+BAAlBA,CAAkD;;;IAGlDA,kCAAMO,KAANP,CAAYC,IAAZD,CAAkB,sCAAlBA,CAAyD;;IATlCA,CAAzB;AAaA,SAAQ,GAAEA,kCAAMS,GAANT,CAAUC,IAAVD,CAAe,oDAAfA,CAAqE;IAC7EQ,gBAAiB;MACfJ,YAAa,EAFjB;AAGF","file":"../Web.js","sourcesContent":["import opn from 'opn';\nimport chalk from 'chalk';\nimport Logger from './Logger';\nimport * as UrlUtils from './UrlUtils';\nimport { readConfigJsonAsync } from './project/ProjectUtils';\n\nfunction logPreviewNotice() {\n  console.log();\n  console.log(\n    chalk.bold.yellow(\n      'Web support in Expo is experimental and subject to breaking changes. Do not use this in production yet.'\n    )\n  );\n  console.log();\n}\n\nexport async function openProjectAsync(projectRoot) {\n  const hasWebSupport = await hasWebSupportAsync(projectRoot);\n  if (!hasWebSupport) {\n    logWebSetup();\n    return { success: false };\n  }\n  logPreviewNotice();\n  try {\n    let url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n    opn(url, { wait: false });\n    return { success: true, url };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on web: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\nexport function logWebSetup() {\n  Logger.global.error(getWebSetupLogs());\n}\n\nexport async function hasWebSupportAsync(projectRoot) {\n  const { exp } = await readConfigJsonAsync(projectRoot);\n  const isWebConfigured = exp.platforms.includes('web');\n  return isWebConfigured;\n}\n\n// If platforms only contains the \"web\" field\nexport async function onlySupportsWebAsync(projectRoot) {\n  const { exp } = await readConfigJsonAsync(projectRoot);\n  if (Array.isArray(exp.platforms) && exp.platforms.length === 1) {\n    return exp.platforms[0] === 'web';\n  }\n  return false;\n}\n\nfunction getWebSetupLogs() {\n  const appJsonRules = chalk.white(\n    `\n  ${chalk.whiteBright.bold(`app.json`)}\n  {\n    \"platforms\": [\n      \"android\",\n      \"ios\",\n  ${chalk.green.bold(`+      \"web\"`)}\n    ]\n  }`\n  );\n  const packageJsonRules = chalk.white(\n    `\n  ${chalk.whiteBright.bold(`package.json`)}\n  {\n    \"dependencies\": {\n  ${chalk.green.bold(`+      \"react-native-web\": \"^0.11.0\",`)}\n  ${chalk.green.bold(`+      \"react-dom\": \"^16.7.0\"`)}\n    },\n    \"devDependencies\": {\n  ${chalk.green.bold(`+      \"babel-preset-expo\": \"^5.1.0\"`)}\n    }\n  }`\n  );\n  return `${chalk.red.bold('Your project is not configured to support web yet!')}\n  ${packageJsonRules}\n    ${appJsonRules}`;\n}\n"],"sourceRoot":"/xdl@53.3.0/src"}